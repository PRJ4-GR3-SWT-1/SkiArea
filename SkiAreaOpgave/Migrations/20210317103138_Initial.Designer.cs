// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkiAreaOpgave.Data;

namespace SkiAreaOpgave.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210317103138_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AreaSkipass", b =>
                {
                    b.Property<string>("AreaListName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SkipassesSkipassId")
                        .HasColumnType("int");

                    b.HasKey("AreaListName", "SkipassesSkipassId");

                    b.HasIndex("SkipassesSkipassId");

                    b.ToTable("AreaSkipass");
                });

            modelBuilder.Entity("AreaSlope", b =>
                {
                    b.Property<string>("AreasName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlopesName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AreasName", "SlopesName");

                    b.HasIndex("SlopesName");

                    b.ToTable("AreaSlope");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Area", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Guest", b =>
                {
                    b.Property<int>("GuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuestID");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Skilift", b =>
                {
                    b.Property<int>("SkiliftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("areaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("from")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("speed")
                        .HasColumnType("real");

                    b.Property<string>("to")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkiliftId");

                    b.HasIndex("areaName");

                    b.ToTable("Skilift");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Skipass", b =>
                {
                    b.Property<int>("SkipassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GuestID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("SkipassId");

                    b.HasIndex("GuestID");

                    b.ToTable("Skipass");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Slope", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Primed")
                        .HasColumnType("bit");

                    b.Property<string>("SlopeCat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Slope");
                });

            modelBuilder.Entity("AreaSkipass", b =>
                {
                    b.HasOne("SkiAreaOpgave.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreaListName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiAreaOpgave.Models.Skipass", null)
                        .WithMany()
                        .HasForeignKey("SkipassesSkipassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaSlope", b =>
                {
                    b.HasOne("SkiAreaOpgave.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiAreaOpgave.Models.Slope", null)
                        .WithMany()
                        .HasForeignKey("SlopesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Skilift", b =>
                {
                    b.HasOne("SkiAreaOpgave.Models.Area", "area")
                        .WithMany("Skilifts")
                        .HasForeignKey("areaName");

                    b.Navigation("area");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Skipass", b =>
                {
                    b.HasOne("SkiAreaOpgave.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestID");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("SkiAreaOpgave.Models.Area", b =>
                {
                    b.Navigation("Skilifts");
                });
#pragma warning restore 612, 618
        }
    }
}
